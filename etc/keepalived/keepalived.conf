global_defs {
  # hostname will be used by default for "router_id"
  #router_id your_name

  # delay for second set of gratuitous ARPs after transition to MASTER.
  # in seconds, 0 for no second set.
  # (default: 5)
  vrrp_garp_master_delay 1

  # minimum time interval for refreshing gratuitous ARPs while MASTER.
  # in seconds.
  # (default: 0 (no refreshing))
  vrrp_garp_master_refresh 60

  # Uncomment the next line if you'd like to use unique multicast groups
  #vrrp_mcast_group4 224.0.0.{{ .VRID | default 40 }}

  # Specify the default username/groupname to run scripts under.
  # If this option is not specified, the user defaults to keepalived_script
  # if that user exists, otherwise root.
  # If groupname is not specified, it defaults to the user's group.
  script_user root

  # Don't run scripts configured to be run as root if any part of the path
  # is writable by a non-root user.
  enable_script_security
}

# The default weight equals 0, which means that any VRRP  instance  monitoring
# the script will transition to the fault state after <fall>
# consecutive failures of the script. After that,  <rise>  consecutive
# successes  will  cause  VRRP  instances to leave the fault state,
# unless they are also in the fault state due to other scripts or  interfaces
# that they are tracking.
vrrp_script chk_haproxy {
  script "/bin/pidof haproxy"
  interval 2  # check every 2 seconds
  rise 2      # require 2 successes for OK
  fall 2      # require 2 failures for KO
}

vrrp_instance vip {
  # Initial state, MASTER|BACKUP
  # As soon as the other machine(s) come up,
  # an election will be held and the machine
  # with the highest priority will become MASTER.
  # So the entry here doesn't matter a whole lot.
  #state MASTER

  interface {{.IFACE}}

  # arbitrary unique number from 0 to 255
  # used to differentiate multiple instances of vrrpd
  # running on the same NIC (and hence same socket).
  virtual_router_id {{ .VRID | default 70 }}

  # for electing MASTER, highest priority wins.
  # To be MASTER, make this 50 more than on other machines.
  priority {{ .PRIORITY | default 100 }}

  virtual_ipaddress {
    {{.VIP}} dev {{.IFACE}}
  }

  track_script {
    chk_haproxy
  }

  # VRRP will normally preempt a lower priority machine when a higher priority
  # machine comes online.  "nopreempt" allows the lower priority machine to
  # maintain the master role, even when a higher priority machine comes back
  # online.
  # NOTE: For this to work, the initial state of this
  # entry must be BACKUP.
  # --
  #nopreempt
}
